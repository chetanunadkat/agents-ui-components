// vite.config.ts
import { defineConfig, loadEnv } from "file:///Users/manshar/projects/defog/agents-ui-components/node_modules/vite/dist/node/index.js";
import react from "file:///Users/manshar/projects/defog/agents-ui-components/node_modules/@vitejs/plugin-react-swc/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.3.1",
  "react-dom": "^18.3.1"
};

// vite.config.ts
import { resolve } from "path";
import tailwindcss from "file:///Users/manshar/projects/defog/agents-ui-components/node_modules/tailwindcss/lib/index.js";
import dts from "file:///Users/manshar/projects/defog/agents-ui-components/node_modules/vite-plugin-dts/dist/index.mjs";
var __vite_injected_original_dirname = "/Users/manshar/projects/defog/agents-ui-components";
var vite_config_default = ({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  return defineConfig({
    css: {
      postcss: {
        plugins: [tailwindcss]
      }
    },
    plugins: [react(), dts({ include: ["lib"] })],
    resolve: {
      alias: {
        "@ui-components": resolve(__vite_injected_original_dirname, "./lib/core-ui.ts")
      }
    },
    build: {
      lib: {
        // Could also be a dictionary or array of multiple entry points
        entry: {
          agent: resolve(__vite_injected_original_dirname, "lib/agent.ts"),
          doc: resolve(__vite_injected_original_dirname, "lib/doc.ts"),
          "core-ui": resolve(__vite_injected_original_dirname, "lib/core-ui.ts"),
          styles: resolve(__vite_injected_original_dirname, "lib/styles.ts")
        },
        formats: ["es"]
      },
      manifest: true,
      rollupOptions: {
        // make sure to externalize deps that shouldn't be bundled
        // into your library
        external: [...Object.keys(peerDependencies)],
        target: "esnext",
        sourcemap: true
      }
    }
  });
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
